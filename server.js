const express = require('express');
const cors = require('cors');
const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const jwt = require('jsonwebtoken');
const { Telegraf } = require('telegraf');

const app = express();
const PORT = process.env.PORT || 3000;

// –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway
const JWT_SECRET = process.env.JWT_SECRET || 'linkgold-default-secret-key-2024';
const BOT_TOKEN = process.env.BOT_TOKEN;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
console.log('üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:');
console.log('üåç NODE_ENV:', process.env.NODE_ENV || 'development');
console.log('üîë JWT_SECRET:', JWT_SECRET ? '***' + JWT_SECRET.slice(-4) : 'NOT SET');
console.log('ü§ñ BOT_TOKEN:', BOT_TOKEN ? '***' + BOT_TOKEN.slice(-4) : 'NOT SET');

if (!BOT_TOKEN) {
    console.error('‚ùå –û–®–ò–ë–ö–ê: BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
    console.log('üí° –†–µ—à–µ–Ω–∏–µ: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ BOT_TOKEN –≤ Railway ‚Üí Settings ‚Üí Variables');
}

if (!JWT_SECRET || JWT_SECRET === 'linkgold-default-secret-key-2024') {
    console.warn('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π JWT_SECRET. –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–≤–æ–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á!');
}

// –î–ª—è Railway - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –ë–î
const dbPath = process.env.NODE_ENV === 'production' 
  ? '/tmp/linkgold.db' 
  : path.join(__dirname, 'linkgold.db');

console.log('üìä –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', dbPath);

const db = new sqlite3.Database(dbPath, (err) => {
  if (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err);
  } else {
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  }
});

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
function initializeDatabase() {
  return new Promise((resolve, reject) => {
    db.serialize(() => {
      // –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      db.run(`CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        telegram_id TEXT UNIQUE,
        username TEXT,
        first_name TEXT,
        balance REAL DEFAULT 0,
        completed_tasks INTEGER DEFAULT 0,
        active_tasks INTEGER DEFAULT 0,
        level INTEGER DEFAULT 0,
        level_progress INTEGER DEFAULT 0,
        is_admin BOOLEAN DEFAULT 0,
        is_main_admin BOOLEAN DEFAULT 0,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
      )`, (err) => {
        if (err) console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã users:', err);
      });

      // –¢–∞–±–ª–∏—Ü–∞ –∑–∞–¥–∞–Ω–∏–π
      db.run(`CREATE TABLE IF NOT EXISTS tasks (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        title TEXT,
        category TEXT,
        price REAL,
        description TEXT,
        time TEXT,
        link TEXT,
        admin_id TEXT,
        available INTEGER DEFAULT 10,
        status TEXT DEFAULT 'active',
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        is_active BOOLEAN DEFAULT 1
      )`, (err) => {
        if (err) console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã tasks:', err);
      });

      // –¢–∞–±–ª–∏—Ü–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
      db.run(`CREATE TABLE IF NOT EXISTS user_tasks (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id TEXT,
        task_id INTEGER,
        status TEXT DEFAULT 'pending',
        photo_url TEXT,
        comment TEXT,
        submitted_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        reviewed_at DATETIME,
        reviewed_by TEXT
      )`, (err) => {
        if (err) console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã user_tasks:', err);
      });

      // –¢–∞–±–ª–∏—Ü–∞ —á–∞—Ç–æ–≤
      db.run(`CREATE TABLE IF NOT EXISTS chats (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id TEXT,
        message TEXT,
        is_admin BOOLEAN DEFAULT 0,
        admin_id TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
      )`, (err) => {
        if (err) console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã chats:', err);
      });

      // –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      db.get('SELECT * FROM users WHERE telegram_id = "8036875641"', (err, row) => {
        if (err) console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', err);
        
        if (!row) {
          db.run(`INSERT INTO users (telegram_id, username, first_name, is_admin, is_main_admin) 
                  VALUES ('8036875641', '@LinkGoldAssistant', 'LinkGold Assistant', 1, 1)`, (err) => {
            if (err) {
              console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', err);
            } else {
              console.log('‚úÖ –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω');
            }
          });
        }
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è
      db.get('SELECT COUNT(*) as count FROM tasks', (err, row) => {
        if (err) console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏–π:', err);
        
        if (row && row.count === 0) {
          const demoTasks = [
            ['–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Telegram –∫–∞–Ω–∞–ª', 'subscribe', 15, '–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à Telegram –∫–∞–Ω–∞–ª –∏ –æ—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –º–∏–Ω–∏–º—É–º 3 –¥–Ω—è.', '5 –º–∏–Ω', 'https://t.me/linkgold_channel', '8036875641'],
            ['–ü—Ä–æ—Å–º–æ—Ç—Ä YouTube –≤–∏–¥–µ–æ', 'view', 10, '–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–∏–¥–µ–æ –Ω–∞ YouTube –¥–æ –∫–æ–Ω—Ü–∞ –∏ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –ª–∞–π–∫.', '10 –º–∏–Ω', 'https://youtube.com/watch?v=example', '8036875641'],
            ['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –≥—Ä—É–ø–ø–µ', 'comment', 20, '–û—Å—Ç–∞–≤—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ.', '7 –º–∏–Ω', 'https://t.me/test_group', '8036875641'],
            ['–†–µ–ø–æ—Å—Ç –≤ Telegram', 'repost', 25, '–°–¥–µ–ª–∞–π—Ç–µ —Ä–µ–ø–æ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–≤–æ–π –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø—É.', '3 –º–∏–Ω', 'https://t.me/linkgold_news', '8036875641'],
            ['–õ–∞–π–∫ –ø–æ—Å—Ç–∞ –≤ Instagram', 'social', 18, '–ü–æ—Å—Ç–∞–≤—å—Ç–µ –ª–∞–π–∫ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç –≤ Instagram.', '2 –º–∏–Ω', 'https://instagram.com/linkgold_official', '8036875641']
          ];
          
          const stmt = db.prepare(`INSERT INTO tasks (title, category, price, description, time, link, admin_id) VALUES (?, ?, ?, ?, ?, ?, ?)`);
          
          demoTasks.forEach(task => {
            stmt.run(task, (err) => {
              if (err) {
                console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–µ–º–æ-–∑–∞–¥–∞–Ω–∏—è:', err);
              }
            });
          });
          
          stmt.finalize();
          console.log('‚úÖ –î–µ–º–æ-–∑–∞–¥–∞–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã');
        }
        
        resolve();
      });
    });
  });
}

// Middleware
app.use(cors());
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));

// –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.use(express.static(path.join(__dirname, 'public')));

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);
  next();
});

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT —Ç–æ–∫–µ–Ω–∞
const authenticateToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  if (!token) {
    return res.status(401).json({ success: false, error: '–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' });
  }

  jwt.verify(token, JWT_SECRET, (err, user) => {
    if (err) {
      return res.status(403).json({ success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω' });
    }
    req.user = user;
    next();
  });
};

// API Routes

// Health check endpoint
app.get('/api/health', (req, res) => {
  res.json({ 
    success: true,
    status: 'OK', 
    timestamp: new Date().toISOString(),
    environment: process.env.NODE_ENV || 'development',
    port: PORT
  });
});

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram
app.post('/api/auth/telegram', (req, res) => {
  const { telegramId, username, firstName } = req.body;

  if (!telegramId) {
    return res.status(400).json({ success: false, error: 'Telegram ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  db.get('SELECT * FROM users WHERE telegram_id = ?', [telegramId], (err, user) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', err);
      return res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö' });
    }

    if (user) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
      if (user.username !== username || user.first_name !== firstName) {
        db.run('UPDATE users SET username = ?, first_name = ? WHERE telegram_id = ?', 
          [username, firstName, telegramId]);
      }
      
      const token = jwt.sign(
        { 
          telegramId: user.telegram_id, 
          username: user.username,
          isAdmin: user.is_admin === 1, 
          isMainAdmin: user.is_main_admin === 1 
        },
        JWT_SECRET,
        { expiresIn: '24h' }
      );

      res.json({ 
        success: true,
        token, 
        user: {
          telegramId: user.telegram_id,
          username: user.username,
          firstName: user.first_name,
          balance: user.balance,
          completedTasks: user.completed_tasks,
          activeTasks: user.active_tasks,
          level: user.level,
          levelProgress: user.level_progress,
          isAdmin: user.is_admin === 1,
          isMainAdmin: user.is_main_admin === 1
        }
      });
    } else {
      // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      db.run(
        'INSERT INTO users (telegram_id, username, first_name) VALUES (?, ?, ?)',
        [telegramId, username || `user_${telegramId}`, firstName || 'User'],
        function(err) {
          if (err) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
            return res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
          }

          const token = jwt.sign(
            { 
              telegramId, 
              username: username || `user_${telegramId}`,
              isAdmin: false, 
              isMainAdmin: false 
            },
            JWT_SECRET,
            { expiresIn: '24h' }
          );

          res.json({ 
            success: true,
            token,
            user: {
              telegramId,
              username: username || `user_${telegramId}`,
              firstName: firstName || 'User',
              balance: 0,
              completedTasks: 0,
              activeTasks: 0,
              level: 0,
              levelProgress: 0,
              isAdmin: false,
              isMainAdmin: false
            }
          });
        }
      );
    }
  });
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π —Å –ø–æ–∏—Å–∫–æ–º –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
app.get('/api/tasks', authenticateToken, (req, res) => {
  const { search, category } = req.query;
  let query = 'SELECT * FROM tasks WHERE is_active = 1';
  const params = [];

  if (search) {
    query += ' AND (title LIKE ? OR description LIKE ?)';
    params.push(`%${search}%`, `%${search}%`);
  }

  if (category && category !== 'all') {
    query += ' AND category = ?';
    params.push(category);
  }

  query += ' ORDER BY created_at DESC';

  db.all(query, params, (err, tasks) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π:', err);
      return res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö' });
    }
    res.json({ success: true, tasks: tasks || [] });
  });
});

// –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞–Ω–∏—è
app.post('/api/tasks/start', authenticateToken, (req, res) => {
  const { taskId } = req.body;

  if (!taskId) {
    return res.status(400).json({ success: false, error: 'ID –∑–∞–¥–∞–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' });
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ
  db.get('SELECT * FROM user_tasks WHERE user_id = ? AND task_id = ? AND status = "pending"', 
    [req.user.telegramId, taskId], (err, existingTask) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏—è:', err);
        return res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö' });
      }

      if (existingTask) {
        return res.status(400).json({ success: false, error: '–í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç–µ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ' });
      }

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –Ω–∞—á–∞–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
      db.run('INSERT INTO user_tasks (user_id, task_id) VALUES (?, ?)',
        [req.user.telegramId, taskId], function(err) {
          if (err) {
            console.error('–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–Ω–∏—è:', err);
            return res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–Ω–∏—è' });
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
          db.run('UPDATE users SET active_tasks = active_tasks + 1 WHERE telegram_id = ?', 
            [req.user.telegramId], (err) => {
              if (err) console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π:', err);
            });

          res.json({ success: true, message: '–ó–∞–¥–∞–Ω–∏–µ –Ω–∞—á–∞—Ç–æ' });
        });
    });
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
app.post('/api/tasks/submit', authenticateToken, (req, res) => {
  const { taskId, photoUrl, comment } = req.body;

  if (!taskId) {
    return res.status(400).json({ success: false, error: 'ID –∑–∞–¥–∞–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' });
  }

  db.run(
    'UPDATE user_tasks SET photo_url = ?, comment = ?, status = "pending", submitted_at = CURRENT_TIMESTAMP WHERE user_id = ? AND task_id = ? AND status = "pending"',
    [photoUrl || '', comment || '', req.user.telegramId, taskId],
    function(err) {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞–Ω–∏—è:', err);
        return res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞–Ω–∏—è' });
      }

      if (this.changes === 0) {
        return res.status(404).json({ success: false, error: '–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' });
      }

      res.json({ success: true, message: '–ó–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É' });
    }
  );
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/user/tasks', authenticateToken, (req, res) => {
  const { status } = req.query;
  let query = `
    SELECT ut.*, t.title, t.price, t.category 
    FROM user_tasks ut 
    JOIN tasks t ON ut.task_id = t.id 
    WHERE ut.user_id = ?
  `;
  const params = [req.user.telegramId];

  if (status) {
    query += ' AND ut.status = ?';
    params.push(status);
  }

  query += ' ORDER BY ut.submitted_at DESC';

  db.all(query, params, (err, tasks) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
      return res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö' });
    }
    res.json({ success: true, tasks: tasks || [] });
  });
});

// –ß–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
app.get('/api/chat/messages', authenticateToken, (req, res) => {
  db.all(
    `SELECT c.*, u.username, u.first_name 
     FROM chats c 
     LEFT JOIN users u ON c.admin_id = u.telegram_id 
     WHERE c.user_id = ? 
     ORDER BY c.created_at ASC`,
    [req.user.telegramId],
    (err, messages) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', err);
        return res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö' });
      }
      res.json({ success: true, messages: messages || [] });
    }
  );
});

app.post('/api/chat/messages', authenticateToken, (req, res) => {
  const { message } = req.body;

  if (!message || message.trim().length === 0) {
    return res.status(400).json({ success: false, error: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' });
  }

  db.run(
    'INSERT INTO chats (user_id, message, is_admin) VALUES (?, ?, 0)',
    [req.user.telegramId, message.trim()],
    function(err) {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
        return res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è' });
      }

      console.log(`üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${req.user.telegramId}: ${message}`);

      res.json({ success: true, message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' });
    }
  );
});

// –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —á–∞—Ç
app.post('/api/chat/admin/reply', authenticateToken, (req, res) => {
  if (!req.user.isAdmin) {
    return res.status(403).json({ success: false, error: '–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
  }

  const { userId, message } = req.body;

  if (!userId || !message) {
    return res.status(400).json({ success: false, error: 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
  }

  db.run(
    'INSERT INTO chats (user_id, message, is_admin, admin_id) VALUES (?, ?, 1, ?)',
    [userId, message.trim(), req.user.telegramId],
    function(err) {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:', err);
        return res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞' });
      }

      console.log(`üí¨ –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∞ ${req.user.telegramId} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}: ${message}`);

      res.json({ success: true, message: '–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω' });
    }
  );
});

// –ê–¥–º–∏–Ω–∫–∞ - –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —á–∞—Ç–æ–≤
app.get('/api/admin/chats', authenticateToken, (req, res) => {
  if (!req.user.isAdmin) {
    return res.status(403).json({ success: false, error: '–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
  }

  const query = `
    SELECT DISTINCT c.user_id, u.username, u.first_name, 
           (SELECT message FROM chats WHERE user_id = c.user_id ORDER BY created_at DESC LIMIT 1) as last_message,
           (SELECT created_at FROM chats WHERE user_id = c.user_id ORDER BY created_at DESC LIMIT 1) as last_message_time,
           (SELECT COUNT(*) FROM chats WHERE user_id = c.user_id AND is_admin = 0 AND admin_id IS NULL) as unread_count
    FROM chats c
    JOIN users u ON c.user_id = u.telegram_id
    ORDER BY last_message_time DESC
  `;

  db.all(query, (err, chats) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤:', err);
      return res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö' });
    }
    res.json({ success: true, chats: chats || [] });
  });
});

// –ê–¥–º–∏–Ω–∫–∞ - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/admin/chats/:userId', authenticateToken, (req, res) => {
  if (!req.user.isAdmin) {
    return res.status(403).json({ success: false, error: '–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
  }

  const { userId } = req.params;

  db.all(
    `SELECT c.*, u.username, u.first_name 
     FROM chats c 
     LEFT JOIN users u ON c.admin_id = u.telegram_id 
     WHERE c.user_id = ? 
     ORDER BY c.created_at ASC`,
    [userId],
    (err, messages) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', err);
        return res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö' });
      }
      res.json({ success: true, messages: messages || [] });
  });
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è (–∞–¥–º–∏–Ω)
app.post('/api/admin/tasks', authenticateToken, (req, res) => {
  if (!req.user.isAdmin) {
    return res.status(403).json({ success: false, error: '–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
  }

  const { title, category, price, description, time, link } = req.body;

  if (!title || !category || !price || !description || !time || !link) {
    return res.status(400).json({ success: false, error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è' });
  }

  db.run(
    'INSERT INTO tasks (title, category, price, description, time, link, admin_id) VALUES (?, ?, ?, ?, ?, ?, ?)',
    [title, category, price, description, time, link, req.user.telegramId],
    function(err) {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è:', err);
        return res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è' });
      }
      
      console.log(`‚úÖ –ê–¥–º–∏–Ω ${req.user.telegramId} —Å–æ–∑–¥–∞–ª –∑–∞–¥–∞–Ω–∏–µ: ${title}`);
      
      res.json({ success: true, id: this.lastID, message: '–ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ' });
    }
  );
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É (–∞–¥–º–∏–Ω)
app.get('/api/admin/tasks/review', authenticateToken, (req, res) => {
  if (!req.user.isAdmin) {
    return res.status(403).json({ success: false, error: '–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
  }

  const query = `
    SELECT ut.*, u.username, u.first_name, t.title, t.price 
    FROM user_tasks ut 
    JOIN users u ON ut.user_id = u.telegram_id 
    JOIN tasks t ON ut.task_id = t.id 
    WHERE ut.status = 'pending'
    ORDER BY ut.submitted_at DESC
  `;

  db.all(query, (err, tasks) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É:', err);
      return res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö' });
    }
    res.json({ success: true, tasks: tasks || [] });
  });
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞–Ω–∏—è (–∞–¥–º–∏–Ω)
app.post('/api/admin/tasks/review/:id', authenticateToken, (req, res) => {
  if (!req.user.isAdmin) {
    return res.status(403).json({ success: false, error: '–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
  }

  const { status } = req.body;
  const taskId = req.params.id;

  if (!['completed', 'rejected'].includes(status)) {
    return res.status(400).json({ success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å' });
  }

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏
  db.get(`
    SELECT ut.user_id, ut.task_id, t.price 
    FROM user_tasks ut 
    JOIN tasks t ON ut.task_id = t.id 
    WHERE ut.id = ?
  `, [taskId], (err, task) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞–Ω–∏–∏:', err);
      return res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö' });
    }

    if (!task) {
      return res.status(404).json({ success: false, error: '–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è
    db.run('UPDATE user_tasks SET status = ?, reviewed_at = CURRENT_TIMESTAMP, reviewed_by = ? WHERE id = ?',
      [status, req.user.telegramId, taskId], function(err) {
        if (err) {
          console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è:', err);
          return res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è' });
        }

        if (status === 'completed') {
          // –ù–∞—á–∏—Å–ª—è–µ–º –¥–µ–Ω—å–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          db.run(`UPDATE users 
                 SET balance = balance + ?, 
                     completed_tasks = completed_tasks + 1, 
                     active_tasks = GREATEST(active_tasks - 1, 0),
                     level_progress = level_progress + 1 
                 WHERE telegram_id = ?`,
            [task.price, task.user_id], (err) => {
              if (err) {
                console.error('–û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤:', err);
              }
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
              db.get('SELECT level_progress FROM users WHERE telegram_id = ?', [task.user_id], (err, user) => {
                if (!err && user && user.level_progress >= 10) {
                  db.run('UPDATE users SET level = level + 1, level_progress = 0 WHERE telegram_id = ?', [task.user_id]);
                }
              });
            });
        } else {
          // –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
          db.run('UPDATE users SET active_tasks = GREATEST(active_tasks - 1, 0) WHERE telegram_id = ?', [task.user_id]);
        }

        console.log(`‚úÖ –ê–¥–º–∏–Ω ${req.user.telegramId} ${status === 'completed' ? '–ø—Ä–∏–Ω—è–ª' : '–æ—Ç–∫–ª–æ–Ω–∏–ª'} –∑–∞–¥–∞–Ω–∏–µ ${taskId}`);

        res.json({ success: true, message: '–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω' });
      });
  });
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∞–¥–º–∏–Ω)
app.get('/api/admin/users', authenticateToken, (req, res) => {
  if (!req.user.isAdmin) {
    return res.status(403).json({ success: false, error: '–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
  }

  db.all('SELECT telegram_id, username, first_name, balance, completed_tasks, active_tasks, level, is_admin FROM users ORDER BY created_at DESC', (err, users) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', err);
      return res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö' });
    }
    res.json({ success: true, users: users || [] });
  });
});

// –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ SPA –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', err);
  res.status(500).json({ success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
  try {
    await initializeDatabase();
    
    app.listen(PORT, '0.0.0.0', () => {
      console.log(`üöÄ –°–µ—Ä–≤–µ—Ä LinkGold –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
      console.log(`üåç –†–µ–∂–∏–º: ${process.env.NODE_ENV || 'development'}`);
      console.log(`üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${dbPath}`);
      console.log(`‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!`);
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    process.exit(1);
  }
}

// Graceful shutdown
process.on('SIGINT', () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  db.close((err) => {
    if (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', err);
      process.exit(1);
    }
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∞');
    process.exit(0);
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
startServer();
